.header-banner.bg-theme-grad-s2
  .nk-banner
    .banner.banner-page
      .mt-3.w-100
        .container#secret-network-block-locker
          .row
            .col-12
              .card
                .card-body
                  %h3= features[:secret_network][:features][:block_locker][:name]
                  %p.mb-0
                    %b Blockchain:
                    = cl_image_tag(features[:secret_network][:cloudinary_public_id], width: 18, height: 18, crop: :fill, dpr: 2, aspect_ratio: 1, fetch_format: :auto, quality: :auto)
                    = features[:secret_network][:name].to_s
                  = render 'secret_network_feature_contracts', production_contract: features[:secret_network][:features][:mount_doom][:contracts][:production], staging_contract: nil
                  %hr
                  %p Immutable, private, restorable. Store your keys safely.
                  %h5 How to use
                  %b 1. Store the text and addresses you want to be able to access the text.
                  %br
                  %b 2. Retrieve the contents of the locker.
                  %br
                  %form{ name: 'blockLockerForm' }
                    .form-group
                      .btn-group.btn-group-toggle.d-block{ 'data-toggle' => 'buttons' }
                        %label.btn.btn-md.btn-light
                          %input#handle-create-or-update{ name: 'function', type: 'radio', value: 'handleCreateOrUpdate', checked: true } Create or update
                        %label.btn.btn-md.btn-light
                          %input#handle-unlock{ name: 'function', type: 'radio', value: 'handleUnlock' } Unlock
                        %label.btn.btn-light.btn-md
                          %input#handle-view{ name: 'function', type: 'radio', value: 'handleViewLocker' } View (when locked)
                        %label.btn.btn-light.btn-md
                          %input#query-view{ name: 'function', type: 'radio', value: 'queryViewLocker' } View (when unlocked)
                    .form-group#content-form-group
                      %label.control-label{ for: 'content' } Content
                      %textarea.form-control.w-100#content{ name: 'content', autocomplete: 'off', rows: 5 }
                    .form-group#passphrase-form-group
                      %label.control-label{ for: 'passphrase' } Passphrase
                      %input.form-control.w-100#passphrase{ name: 'passphrase', autocomplete: 'off' }
                    .form-group#whitelisted-address-1-form-group
                      %label.control-label{ for: 'whitelisted-address-1' } Whitelisted address 1
                      %input.form-control.w-100#whitelisted-address-1{ name: 'whitelistedAddress1', autocomplete: 'off' }
                    .form-group#whitelisted-address-2-form-group
                      %label.control-label{ for: 'whitelisted-address-2' } Whitelisted address 2
                      %input.form-control.w-100#whitelisted-address-2{ name: 'whitelistedAddress2', autocomplete: 'off' }
                    .form-group#whitelisted-address-3-form-group
                      %label.control-label{ for: 'whitelisted-address-3' } Whitelisted address 3
                      %input.form-control.w-100#whitelisted-address-3{ name: 'whitelistedAddress3', autocomplete: 'off' }
                    .form-group.d-none
                      %label.control-label Wallet address
                      %input.form-control.w-100#address{ name: 'walletAddress', required: true, autocomplete: 'off' }
                    %button.btn.btn-primary.btn-md.mt-3#submit-button{ type: 'submit' }
                      .d-none#loading
                        %em.spinner-grow.spinner-grow-sm{ 'aria-hidden' => 'true', :role => 'status' }
                        %em Loading...
                      #ready
                        Submit
              .card.my-3.d-none#result-container
                .card-body
                  %h3 Result
                  %pre.p-1.m-1.alert.alert-success.d-none#result-value
